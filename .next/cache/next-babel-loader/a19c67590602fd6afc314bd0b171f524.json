{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nvar postsDirectory = path.join(process.cwd(), 'posts');\nvar attentionDirectory = path.join(process.cwd(), 'attention');\nexport function getSortedPostsData() {\n  var fileNames = fs.readdirSync(postsDirectory);\n  var allPostsData = fileNames.map(function (fileName) {\n    //remove \".md\" from file name to get id\n    var id = fileName.replace(/\\.md$/, '').toString(); //Read markdown file as string\n\n    var fullPath = path.join(postsDirectory, fileName);\n    var fileContents = fs.readFileSync(fullPath, 'utf8'); //use gray-matter to parse the post metadata section\n\n    var matterResult = matter(fileContents); //Combine the data with the id\n\n    return _objectSpread({\n      id: id\n    }, matterResult.data);\n  }); //Sort posts by date\n\n  return allPostsData.sort(function (a, b) {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllPostIds() {\n  var fileNames = fs.readdirSync(postsDirectory);\n  return fileNames.map(function (fileName) {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport function getPostData(_x) {\n  return _getPostData.apply(this, arguments);\n}\n\nfunction _getPostData() {\n  _getPostData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n    var fullPath, fileContents, matterResult, processedContent, contentHtml;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fullPath = path.join(postsDirectory, \"\".concat(id, \".md\"));\n            fileContents = fs.readFileSync(fullPath, 'utf8'); //use gray-matter to parse the post metadata section\n\n            matterResult = matter(fileContents); //use remark convert markdown into html string\n\n            _context.next = 5;\n            return remark().use(html).process(matterResult.content);\n\n          case 5:\n            processedContent = _context.sent;\n            contentHtml = processedContent.toString();\n            return _context.abrupt(\"return\", _objectSpread({\n              id: id,\n              contentHtml: contentHtml\n            }, matterResult.data));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getPostData.apply(this, arguments);\n}\n\nexport function getAttention() {\n  return _getAttention.apply(this, arguments);\n}\n\nfunction _getAttention() {\n  _getAttention = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var fullPath, fileContents, matterResult, processedContent, contentHtml;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            fullPath = path.join(attentionDirectory, 'attention.md');\n            fileContents = fs.readFileSync(fullPath, 'utf8');\n            matterResult = matter(fileContents);\n            _context2.next = 5;\n            return remark().use(html).process(matterResult.content);\n\n          case 5:\n            processedContent = _context2.sent;\n            contentHtml = processedContent.toString();\n            return _context2.abrupt(\"return\", _objectSpread({\n              contentHtml: contentHtml\n            }, matterResult.data));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getAttention.apply(this, arguments);\n}\n\nexport function getBan() {\n  return _getBan.apply(this, arguments);\n}\n\nfunction _getBan() {\n  _getBan = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var fullPath, fileContents, matterResult, processedContent, contentHtml;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            fullPath = path.join(attentionDirectory, 'ban.md');\n            fileContents = fs.readFileSync(fullPath, 'utf8');\n            matterResult = matter(fileContents);\n            _context3.next = 5;\n            return remark().use(html).process(matterResult.content);\n\n          case 5:\n            processedContent = _context3.sent;\n            contentHtml = processedContent.toString();\n            return _context3.abrupt(\"return\", _objectSpread({\n              contentHtml: contentHtml\n            }, matterResult.data));\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getBan.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/tkak/sample/villageon/villageon/lib/posts.js"],"names":["fs","path","matter","remark","html","postsDirectory","join","process","cwd","attentionDirectory","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","toString","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getAllPostIds","params","getPostData","use","content","processedContent","contentHtml","getAttention","getBan"],"mappings":"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","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport remark from 'remark'\nimport html from 'remark-html'\n\nconst postsDirectory = path.join(process.cwd(), 'posts')\nconst attentionDirectory = path.join(process.cwd(), 'attention')\n\n\nexport function getSortedPostsData() {\n    const fileNames = fs.readdirSync(postsDirectory)\n    const allPostsData = fileNames.map(fileName => {\n        //remove \".md\" from file name to get id\n        const id = fileName.replace(/\\.md$/, '').toString()\n\n        //Read markdown file as string\n        const fullPath = path.join(postsDirectory, fileName)\n        const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n        //use gray-matter to parse the post metadata section\n        const matterResult = matter(fileContents)\n\n        //Combine the data with the id\n        return {\n            id,\n            ...matterResult.data\n        }\n    })\n    \n    //Sort posts by date\n    return allPostsData.sort((a, b) => {\n        if (a.date < b.date) {\n            return 1\n        } else {\n            return -1\n        }\n    })\n}\n\nexport function getAllPostIds() {\n    const fileNames = fs.readdirSync(postsDirectory)\n\n    return fileNames.map(fileName => {\n        return {\n            params: {\n                id: fileName.replace(/\\.md$/, '')\n            }\n        }\n    })\n}\n\nexport async function getPostData(id) {\n    const fullPath = path.join(postsDirectory, `${id}.md`)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n    //use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents)\n\n    //use remark convert markdown into html string\n    const processedContent = await remark()\n        .use(html)\n        .process(matterResult.content)\n\n    const contentHtml = processedContent.toString()\n    return {\n        id,\n        contentHtml,\n        ...matterResult.data\n    }\n}\n\nexport async function getAttention() {\n    const fullPath = path.join(attentionDirectory, 'attention.md')\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n    const matterResult = matter(fileContents)\n\n    const processedContent = await remark()\n        .use(html)\n        .process(matterResult.content)\n\n    const contentHtml = processedContent.toString()\n    return {\n        contentHtml,\n        ...matterResult.data\n    }\n}\n\nexport async function getBan() {\n    const fullPath = path.join(attentionDirectory, 'ban.md')\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n    const matterResult = matter(fileContents)\n\n    const processedContent = await remark()\n        .use(html)\n        .process(matterResult.content)\n\n    const contentHtml = processedContent.toString()\n    return {\n        contentHtml,\n        ...matterResult.data\n    }\n}"]},"metadata":{},"sourceType":"module"}