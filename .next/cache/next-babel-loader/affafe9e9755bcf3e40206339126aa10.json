{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nconst postsDirectory = path.join(process.cwd(), 'posts');\nconst attentionDirectory = path.join(process.cwd(), 'attention');\nexport function getSortedPostsData() {\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    //remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, '').toString(); //Read markdown file as string\n\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8'); //use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents); //Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  }); //Sort posts by date\n\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllPostIds() {\n  const fileNames = fs.readdirSync(postsDirectory);\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport async function getPostData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); //use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); //use remark convert markdown into html string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}\nexport async function getAttention() {\n  const fullPath = path.join(attentionDirectory, 'attention.md');\n  const fileContents = fs.readFileSync(fullPath, 'utf8');\n  const matterResult = matter(fileContents);\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  return _objectSpread({\n    contentHtml\n  }, matterResult.data);\n}\nexport async function getBan() {\n  const fullPath = path.join(attentionDirectory, 'ban.md');\n  const fileContents = fs.readFileSync(fullPath, 'utf8');\n  const matterResult = matter(fileContents);\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  return _objectSpread({\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["/Users/tkak/sample/villageon/villageon/lib/posts.js"],"names":["fs","path","matter","remark","html","postsDirectory","join","process","cwd","attentionDirectory","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","toString","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getAllPostIds","params","getPostData","processedContent","use","content","contentHtml","getAttention","getBan"],"mappings":"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","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport remark from 'remark'\nimport html from 'remark-html'\n\nconst postsDirectory = path.join(process.cwd(), 'posts')\nconst attentionDirectory = path.join(process.cwd(), 'attention')\n\n\nexport function getSortedPostsData() {\n    const fileNames = fs.readdirSync(postsDirectory)\n    const allPostsData = fileNames.map(fileName => {\n        //remove \".md\" from file name to get id\n        const id = fileName.replace(/\\.md$/, '').toString()\n\n        //Read markdown file as string\n        const fullPath = path.join(postsDirectory, fileName)\n        const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n        //use gray-matter to parse the post metadata section\n        const matterResult = matter(fileContents)\n\n        //Combine the data with the id\n        return {\n            id,\n            ...matterResult.data\n        }\n    })\n    \n    //Sort posts by date\n    return allPostsData.sort((a, b) => {\n        if (a.date < b.date) {\n            return 1\n        } else {\n            return -1\n        }\n    })\n}\n\nexport function getAllPostIds() {\n    const fileNames = fs.readdirSync(postsDirectory)\n\n    return fileNames.map(fileName => {\n        return {\n            params: {\n                id: fileName.replace(/\\.md$/, '')\n            }\n        }\n    })\n}\n\nexport async function getPostData(id) {\n    const fullPath = path.join(postsDirectory, `${id}.md`)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n    //use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents)\n\n    //use remark convert markdown into html string\n    const processedContent = await remark()\n        .use(html)\n        .process(matterResult.content)\n\n    const contentHtml = processedContent.toString()\n    return {\n        id,\n        contentHtml,\n        ...matterResult.data\n    }\n}\n\nexport async function getAttention() {\n    const fullPath = path.join(attentionDirectory, 'attention.md')\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n    const matterResult = matter(fileContents)\n\n    const processedContent = await remark()\n        .use(html)\n        .process(matterResult.content)\n\n    const contentHtml = processedContent.toString()\n    return {\n        contentHtml,\n        ...matterResult.data\n    }\n}\n\nexport async function getBan() {\n    const fullPath = path.join(attentionDirectory, 'ban.md')\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n    const matterResult = matter(fileContents)\n\n    const processedContent = await remark()\n        .use(html)\n        .process(matterResult.content)\n\n    const contentHtml = processedContent.toString()\n    return {\n        contentHtml,\n        ...matterResult.data\n    }\n}"]},"metadata":{},"sourceType":"module"}